The Kinect has several disadvantages that had to be overcome.  The Kinect has a limited field of view (57 degrees).  The Kinect was designed to track users from a fixed vantage point.  The Kinect is sensitive to vibration.  The Kinect does not work well in direct sunlight (vibration)



LIMITED FIELD OF VIEW

The Kinect has a field of view of 57 degrees.  While this is sufficient for tracking a target with limited freedom from a fixed vantage point, it shows weaknesses for moving targets.

When using the Kinect as the sole source of observation, the robot must constantly face the user (within +- 30 degrees) or lose a target lock.  This puts severe constraints on its ability to maneuver and plan paths without losing the target.

Even following a target down a straignt hall one can run into problems.  If an obstacle appears between the user and the robot, the robot will have to navigate around the obstacle. (INSERT IMAGE HERE OF ROBOT AVOIDING OBSTACLE, INCLUDING TANGENT ANGLE DEVIATION FROM STRAIGHT PATH) Likely, as part of the avoidance the user will leave the Kinect's field of view, leading to a target loss.  When the robot once again faces the user, it will have to re-find the user.

The situation becomes worse when the user takes a twisting path, especially doubling back behind the robot.  In tight spaces such as hallways, the user will necessarily come close to Harlie when moving behind it.  Because the Kinect cannot track targets closer than two feet away, this frequently leads to target loss.  Additionally, the robot can get stuck against a wall with no hope of recovery.




MOVING BASE PROBLEM

The Kinect was designed to track skeletons from a fixed vantage point (in front of a television.)
The Kinect was not meant to be mounted on a moving base.  I performed some characterization to determine how well the Kinect can track moving targets from a moving vantage point.

The Kinect performs suprisingly well when mounted on a smoothly moving base given that it is operating outside of its design parameters.

I performed some tests to see how often the Kinect drops targets when rotating.  When the Kinect is still, its performance is obviously best.  It is able to detect users rapidly moving through the scene, and it can easily deal with partial occlusion.

The performance gradually degrades as the Kinect itself is moved.  I performed some tests in which I instructed the robot to move back and forth through 1 radian of angle (approximately the Kinect's FOV) with a sinusoidal velocity profile.

As expected, the Kinect's performance gradually degrades with the speed of rotation.  With a maximum speed below 0.3 radians/sec (17 degrees/sec), the performance is almost identical to the case of standing still.  As the maximum speed increases, troubles begin to emerge.  Target acquisition and tracking was tested up to 0.8 radians/second.

When the target is in plain view

With higher speeds, the target tends to flicker as the Kinect momentarily loses a lock but is able to reestablish it.  Sometimes, especially if there is a jolt, the Kinect will not reestablish the lock.

It is more difficult for the Kinect to lock on to targets when it is moving faster.


I also tested the Kinect's stability to step inputs in angular velocity.



Targets further away from the Kinect
I hypothesize that the Kinect tracks users frame-to-frame.  Tracking is a more difficult problem when the base is moving



I hypothesize that the Kinect has a reliance on background subtraction. 

The Kinect cannot easily acquire moving targets.

a smoothing factor (one of the few user accessable parameters)

The Kinect is interfaced through OpenNI (Open Natural Interraction) drivers which provide an open-source API.  However, the skeleton tracking itself is done in a closed source binary (NITE, made by PrimeSense.)  Therefore little can be done to improve the dropout rate on moving targets.





Harlie's Kinect was mounted in such a way that it cannot see legs (INSERT MECHANICAL DRAWING OF KINECT'S FOV) close up.  Luckily, the NITE software can be commanded to ignore legs and just track the target's upper torso.  The problem is that without legs, the tracking software loses an important characteristic that can discriminate people from inanimate objects.



DISCRIMINTATION BETWEEN USERS

The Kinect has no built-in facilities for discriminating between users.

If a user exits the scene, there is no guarantee that when the user is re-detected that user will be assigned the same ID.

Upon reacquiring a user, it will have to recalibrate for that user.  The calibration step can be skipped, and 




back and forth through 1 radian (approximately the Kinect's field of view) with a sinusoidal velocity profile and a top speed of 0.8 rad/sec (46 degrees/second).
